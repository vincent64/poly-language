import java.lang.StringBuilder;
import java.text.DecimalFormat;
import poly.util.Equatable;
import poly.util.Array;

¦ The FloatVector class represents a vector with single-precision floating point components.
¦ @author Vincent Philippe (@vincent64)
¦ @version 0.1
¦
class+ FloatVector(Vector) : Vector.Property, Equatable {
    ¦ The vector float components.
    ~ const float[] values;

    ¦ Constructs a float vector with the given size.
    ¦ Every component are initialized to zero.
    ¦ @param size the vector size
    ¦
    fn+ constructor(const int size) {
        super(size);
        values = new[size];
    }

    ¦ Constructs a float vector with the given values.
    ¦ @param values the component values
    ¦
    fn+ constructor(float[] values) {
        super(values.size);
        this.values = Array.copy(values);
    }

    ¦ Returns the value of the index-th component.
    ¦ @param index the component index
    ¦ @returns the component value
    ¦
    fn+ float get(int index) {
        assert(index >= 0 && index < size);
        return values[index];
    }

    ¦ Returns the length of the vector.
    ¦ @returns the vector length
    ¦
    fn+ double length() {
        return Math.sqrt(sum(int i = 0; i < size; i++) values[i]:double * values[i]:double);
    }

    ¦ Returns the normalized vector.
    ¦ @returns the normalized vector
    ¦
    fn+ DoubleVector normalize() {
        double length = length();

        //Normalize every component
        double[] values = new[size];
        for(int i = 0; i < size; i++)
            values[i] = this.values[i] / length;

        return new(values);
    }

    fn+ bool isUnit() {
        return length() == 1d;
    }

    ¦ Adds the current vector with the given float vector.
    ¦ @param that the float vector
    ¦ @returns the resulting float vector
    ¦
    op+ FloatVector +(FloatVector that) {
        assert(that.size == size);

        //Add every component
        float[] values = new[size];
        for(int i = 0; i < values.size; i++)
            values[i] = this.values[i] + that.values[i];

        return new(values);
    }

    ¦ Subtracts the current vector with the given float vector.
    ¦ @param that the float vector
    ¦ @returns the resulting float vector
    ¦
    op+ FloatVector -(FloatVector that) {
        assert(that.size == size);

        //Subtract every component
        float[] values = new[size];
        for(int i = 0; i < values.size; i++)
            values[i] = this.values[i] - that.values[i];

        return new(values);
    }

    ¦ Negates the current vector.
    ¦ @returns the resulting float vector
    ¦
    op+ FloatVector -() {
        //Negate every component
        float[] values = new[size];
        for(int i = 0; i < values.size; i++)
            values[i] = -this.values[i];

        return new(values);
    }

    ¦ Multiplies the current vector with the given float scalar.
    ¦ @param value the float scalar
    ¦ @returns the resulting float vector
    ¦
    op+ FloatVector *(float value) {
        //Multiply every component
        float[] values = new[size];
        for(int i = 0; i < values.size; i++)
            values[i] = this.values[i] * value;

        return new(values);
    }

    ¦ Performs the dot product with the current vector and the given float vector.
    ¦ @param that the float vector
    ¦ @returns the dot product
    ¦
    op+ float *(FloatVector that) {
        assert(that.size == size);
        return sum(int i = 0; i < size; i++) this.values[i] * that.values[i];
    }

    ¦ Performs the cross product with the current vector and the given float vector.
    ¦ @note This operation is defined only for vectors of size 3.
    ¦ @param that the float vector
    ¦ @returns the cross product
    ¦
    op+ FloatVector ^(FloatVector that) {
        assert(size == 3);

        //Compute cross product
        float[] values = new[size];
        values[0] = this.values[1] * that.values[2] - this.values[2] * that.values[1];
        values[1] = this.values[2] * that.values[0] - this.values[0] * that.values[2];
        values[2] = this.values[0] * that.values[1] - this.values[1] * that.values[0];

        return new(values);
    }

    ¦ Returns the value of the index-th component.
    ¦ @param index the component index
    ¦ @returns the component value
    ¦
    op+ float access(int index) {
        return get(index);
    }

    ¦ Returns whether the current float vector is equal to the given float vector.
    ¦ Two vectors are equal if they have the same size and every component are equal.
    ¦ @param that the float vector
    ¦ @returns true if the vectors are equal
    ¦
    op+ bool ==(FloatVector that) {
        if(this.size != that.size) return false;

        //Check every component
        for(int i = 0; i < size; i++) {
            if(this.values[i] != that.values[i])
                return false;
        }

        return true;
    }

    ¦ Returns whether the current float vector is not equal to the given float vector.
    ¦ @param that the float vector
    ¦ @returns true if the vectors are not equal
    ¦
    op+ bool !=(FloatVector that) {
        return !(this == that);
    }

    op+ bool ==(Object object) {
        if(object !=: FloatVector) return false;
        return this == object:FloatVector;
    }

    op+ bool !=(Object object) {
        return !(this == object);
    }

    fn+ bool equals(Object object) {
        return this == object;
    }

    ¦ Casts the current float vector to an integer vector.
    ¦ @returns the integer vector
    ¦
    fn+ IntVector toIntVector() {
        int[] values = new[size];
        for(int i = 0; i < size; i++)
            values[i] = this.values[i]:int;

        return new(values);
    }

    ¦ Casts the current float vector to a long vector.
    ¦ @returns the long vector
    ¦
    fn+ LongVector toLongVector() {
        long[] values = new[size];
        for(int i = 0; i < size; i++)
            values[i] = this.values[i]:long;

        return new(values);
    }

    ¦ Casts the current float vector to a double vector.
    ¦ @returns the double vector
    ¦
    fn+ DoubleVector toDoubleVector() {
        double[] values = new[size];
        for(int i = 0; i < size; i++)
            values[i] = this.values[i]:double;

        return new(values);
    }

    ¦ Returns the current float vector to a float matrix.
    ¦ The resulting matrix is a matrix with 1 column.
    ¦ @returns the float matrix
    ¦
    fn+ FloatMatrix toMatrix() {
        return new(values, size);
    }

    fn+ String toString() {
        DecimalFormat format = new("#.####");
        StringBuilder builder = new();

        //Append every component
        for(int i = 0; i < size; i++)
            builder.append(" ").append(format.format(values[i]:double)).append(" ");

        return builder.toString();
    }
}