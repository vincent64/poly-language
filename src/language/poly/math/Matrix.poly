¦ The Matrix class represents a mathematical matrix with a fixed size.
¦ @author Vincent Philippe (@vincent64)
¦ @version 0.1
¦ @update 0.3
¦
class+ Matrix {
    ¦ The matrix rows count.
    ~ const int rows;
    ¦ The matrix columns count.
    ~ const int columns;

    ¦ Constructs a matrix with the given row and column sizes.
    ¦ @param rows the rows count (rows > 0)
    ¦ @param columns the columns count (columns > 0)
    ¦
    fn+ constructor(const int rows, const int columns) {
        assert(rows > 0) : new InvalidMatrixSizeException();
        assert(columns > 0) : new InvalidMatrixSizeException();
        this.rows = rows;
        this.columns = columns;
    }

    ¦ Returns whether the given matrix is square (i.e. its rows count equals its columns count).
    ¦ @returns true if the matrix is square
    ¦
    fn+ bool isSquare() {
        return rows == columns;
    }

    ¦ Returns the rows count of the matrix.
    ¦ @returns the matrix rows count
    ¦
    fn+ int rows() {
        return rows;
    }

    ¦ Returns the columns count of the matrix.
    ¦ @returns the matrix columns count
    ¦
    fn+ int columns() {
        return columns;
    }

    ¦ The Matrix.Property interface describes the properties of a matrix and
    ¦ provides methods to check those properties.
    ¦
    interface+ Property {

        ¦ Returns whether the current matrix is diagonal.
        ¦ A square matrix is diagonal if every component outside
        ¦ the main diagonal are equal to zero.
        ¦ @return true if the matrix is diagonal
        ¦
        fn bool isDiagonal();

        ¦ Returns whether the current matrix is hollow.
        ¦ A square matrix is hollow if every component on
        ¦ the main diagonal are equal to zero.
        ¦ @returns true if the matrix is hollow
        ¦
        fn bool isHollow();

        ¦ Returns whether the current matrix is upper triangular.
        ¦ A square matrix is upper triangular if every component below
        ¦ the main diagonal are equal to zero.
        ¦ @returns true if the matrix is upper triangular
        ¦
        fn bool isUpperTriangular();

        ¦ Returns whether the current matrix is lower triangular.
        ¦ A square matrix is lower triangular if every component above
        ¦ the main diagonal are equal to zero.
        ¦ @returns true if the matrix is lower triangular
        fn bool isLowerTriangular();

        ¦ Returns whether the current matrix is symmetric.
        ¦ A square matrix is symmetric if it is equal to its transpose.
        ¦ @returns true if the matrix is symmetric
        fn bool isSymmetric();
    }

    ¦ The InvalidMatrixSizeException is thrown when there is an attempt
    ¦ to construct a matrix with an invalid size (below 1).
    ¦
    exception~ InvalidMatrixSizeException {
        fn~ constructor() super("Matrix size must be greater or equal to 1.");
    }

    ¦ The RowIndexOutOfBoundsException is thrown when a row index out of
    ¦ the matrix row bounds (below 0 or above rows count) is used.
    ¦
    exception~ RowIndexOutOfBoundsException {
        fn~ constructor() super("Row index is out of bounds.");
    }

    ¦ The ColumnIndexOutOfBoundsException is thrown when a column index out of
    ¦ the matrix column bounds (below 0 or above columns count) is used.
    ¦
    exception~ ColumnIndexOutOfBoundsException {
        fn~ constructor() super("Column index is out of bounds.");
    }

    ¦ The NonSquareMatrixException is thrown when there is an attempt to
    ¦ perform an operation requiring a square matrix.
    ¦
    exception~ NonSquareMatrixException {
        fn~ constructor() super("Square matrix required to perform this operation.");
    }

    ¦ The MatrixDimensionMismatchException is thrown when there is a
    ¦ dimension mismatch when applying an operation between two matrices.
    ¦
    exception~ MatrixDimensionMismatchException {
        fn~ constructor() super("The matrix dimensions do not match.");
    }
}