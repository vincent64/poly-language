¦ The Duration class represents a physical measure of duration.
¦ It provides convenient operations between durations and other measurements,
¦ and prevents unit mistakes by explicitly requesting the unit when
¦ providing and retrieving the duration value.
¦ The default unit of a duration value is the second.
¦ @author Vincent Philippe (@vincent64)
¦ @version v0.5
class+ Duration(Measure) {
    ¦ Constructs a duration with the given value and unit.
    ¦ @param value the duration value
    ¦ @param unit the duration unit
    fn+ constructor(const double value, Unit unit) {
        super(value * unit.factor);
        assert(value >= 0d): new NegativeDurationException();
    }
    
    ¦ Constructs a duration with the given value in the default unit (second).
    ¦ @param value the duration value
    fn+ constructor(const double value) this(value, Unit.DEFAULT);

    ¦ Adds the current duration with the given duration.
    ¦ @param that the duration
    ¦ @returns the resulting duration
    op+ Duration +(Duration that) = new(value + that.value);

    ¦ Subtracts the current duration to the given duration.
    ¦ @param that the duration
    ¦ @returns the resulting duration
    op+ Duration -(Duration that) = new(value - that.value);

    ¦ Multiplies the current duration with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting duration
    op+ Duration *(double value) = new(this.value * value);

    ¦ Divides the current duration with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting duration
    op+ Duration /(double value) = new(this.value / value);

    ¦ Returns the remainder of the current duration with the given duration.
    ¦ @param that the duration
    ¦ @returns the resulting duration
    op+ Duration %(Duration that) = new(value % that.value);

    ¦ Returns whether the current duration is equal to the given duration.
    ¦ @param that the duration
    ¦ @returns true if the durations are equal
    op+ bool ==(Duration that) = value == that.value;

    ¦ Returns whether the current duration is not equal to the given duration.
    ¦ @param that the duration
    ¦ @returns true if the durations are not equal
    op+ bool !=(Duration that) = value != that.value;

    ¦ Returns whether the current duration is greater than the given duration.
    ¦ @param that the duration
    ¦ @returns true if the current duration is greater
    op+ bool >(Duration that) = value > that.value;

    ¦ Returns whether the current duration is less than the given duration.
    ¦ @param that the duration
    ¦ @returns true if the current duration is less
    op+ bool <(Duration that) = value < that.value;

    ¦ Returns whether the current duration is greater or equal that the given duration.
    ¦ @param that the duration
    ¦ @returns true if the current duration is greater or equal
    op+ bool >=(Duration that) = value >= that.value;

    ¦ Returns whether the current duration is less or equal than the given duration.
    ¦ @param that the duration
    ¦ @returns true if the current duration is less or equal
    op+ bool <=(Duration that) = value <= that.value;

    ¦ Returns the duration value in the given unit.
    ¦ @param unit the duration unit
    ¦ @returns the duration value
    fn+ double value(Unit unit) = value / unit.factor;

    ¦ Returns the string representation of the duration with the given unit.
    ¦ @param unit the duration unit
    ¦ @returns the duration string representation
    fn+ String toString(Unit unit) = String.valueOf(value(unit)) + " " + unit.symbol;

    ¦ Returns the string representation of the duration with the default unit.
    ¦ @returns the duration string representation
    fn+ String toString() = toString(Unit.DEFAULT);

    fn+ bool equals(Object object) = object ==: Duration && this == object:Duration;

    ¦ The Duration.Unit enum contains every unit that can be used
    ¦ when providing or retrieving the duration value.
    ¦ The default unit of a duration value is the meter.
    enum+ Unit {
        SECOND(1d, "s"),
        NANOSECOND(0.000_000_001d, "ns"),
        MICROSECOND(0.000_001d, "μs"),
        MILLISECOND(0.001d, "ms"),
        MINUTE(60d, "min"),
        HOUR(3600d, "h");

        ~# const Unit DEFAULT = SECOND;
        ~ const double factor;
        ~ const String symbol;

        fn constructor(attr double factor, attr String symbol) { }
    }

    ¦ The Duration.NegativeDurationException exception is thrown when there is an attempt
    ¦ to construct a duration with a negative value.
    exception~ NegativeDurationException {
        fn~ constructor() super("Negative duration");
    }
}