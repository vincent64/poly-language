import poly.math.Math;

¦ The Area class represents a physical measure of area.
¦ It provides convenient operations between areas and other measurements,
¦ and prevents unit mistakes by explicitly requesting the unit when
¦ providing and retrieving the area value.
¦ The default unit of an area value is the meter squared.
¦ @author Vincent Philippe (@vincent64)
¦ @version v0.5
class+ Area(Measure) {
    ¦ Constructs an area with the given value and unit.
    ¦ @param value the area value
    ¦ @param unit the area unit
    fn+ constructor(const double value, Unit unit) {
        super(value * unit.factor);
        assert(value >= 0d): new NegativeAreaException();
    }
    
    ¦ Constructs a area with the given value in the default unit.
    ¦ @param value the area value
    fn+ constructor(const double value) this(value, Unit.DEFAULT);

    ¦ Adds the current area with the given area.
    ¦ @param that the area
    ¦ @returns the resulting area
    op+ Area +(Area that) = new(value + that.value);

    ¦ Subtracts the current area to the given area.
    ¦ @param that the area
    ¦ @returns the resulting area
    op+ Area -(Area that) = new(value - that.value);

    ¦ Multiplies the current area with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting area
    op+ Area *(double value) = new(this.value * value);

    ¦ Divides the current area with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting area
    op+ Area /(double value) = new(this.value / value);

    ¦ Returns the remainder of the current area with the given area.
    ¦ @param that the area
    ¦ @returns the resulting area
    op+ Area %(Area that) = new(value % that.value);

    ¦ Multiplies the current area with the given length.
    ¦ @param that the length
    ¦ @returns the resulting volume
    op+ Volume *(Length that) = new(value * that.value);

    ¦ Divides the current area with the given length.
    ¦ @param that the length
    ¦ @returns the resulting length
    op+ Length /(Length that) = new(value / that.value);

    ¦ Returns whether the current area is equal to the given area.
    ¦ @param that the area
    ¦ @returns true if the areas are equal
    op+ bool ==(Area that) = value == that.value;

    ¦ Returns whether the current area is not equal to the given area.
    ¦ @param that the area
    ¦ @returns true if the areas are not equal
    op+ bool !=(Area that) = value != that.value;

    ¦ Returns whether the current area is greater than the given area.
    ¦ @param that the area
    ¦ @returns true if the current area is greater
    op+ bool >(Area that) = value > that.value;

    ¦ Returns whether the current area is less than the given area.
    ¦ @param that the area
    ¦ @returns true if the current area is less
    op+ bool <(Area that) = value < that.value;

    ¦ Returns whether the current area is greater or equal that the given area.
    ¦ @param that the area
    ¦ @returns true if the current area is greater or equal
    op+ bool >=(Area that) = value >= that.value;

    ¦ Returns whether the current area is less or equal than the given area.
    ¦ @param that the area
    ¦ @returns true if the current area is less or equal
    op+ bool <=(Area that) = value <= that.value;

    ¦ Returns the area value in the given unit.
    ¦ @param unit the area unit
    ¦ @returns the area value
    fn+ double value(Unit unit) = value / unit.factor;

    ¦ Returns the string representation of the area with the given unit.
    ¦ @param unit the area unit
    ¦ @returns the area string representation
    fn+ String toString(Unit unit) = String.valueOf(value(unit)) + " " + unit.symbol;

    ¦ Returns the string representation of the area with the default unit.
    ¦ @returns the area string representation
    fn+ String toString() = toString(Unit.DEFAULT);

    fn+ bool equals(Object object) = object ==: Area && this == object:Area;

    ¦ Returns the area of a square with the given length.
    ¦ @param length the length
    ¦ @returns the area of the square
    fn+ # Area ofSquare(Length length) = new(length.value * length.value);

    ¦ Returns the area of a circle with the given radius.
    ¦ @param radius the radius
    ¦ @returns the area of the circle
    fn+ # Area ofCircle(Length radius) = new(radius.value * radius.value * Math.PI);

    ¦ The Area.Unit enum contains every unit that can be used
    ¦ when providing or retrieving the area value.
    ¦ The default unit of an area value is the meter squared.
    enum+ Unit {
        METER_2(1d, "m"),
        NANOMETER_2(0.000_000_000_000_000_001d, "nm²"),
        MICROMETER_2(0.000_000_000_001d, "μm²"),
        MILLIMETER_2(0.000_001d, "mm²"),
        CENTIMETER_2(0.0001d, "cm²"),
        DECIMETER_2(0.01d, "dm²"),
        ARE(100d, "are"),
        HECTARE(10_000d, "hectare"),
        KILOMETER_2(1_000_000d, "km²"),
        INCH_2(0.000645d, "in²"),
        FOOT_2(0.092_903_04d, "ft²"),
        YARD_2(0.836_127_36d, "yd²"),
        MILE_2(2_589_988.110d, "mi²");

        ~# const Unit DEFAULT = METER_2;
        ~ const double factor;
        ~ const String symbol;

        fn constructor(attr double factor, attr String symbol) { }
    }

    ¦ The Area.NegativeAreaException exception is thrown when there is an attempt
    ¦ to construct a area with a negative value.
    exception~ NegativeAreaException {
        fn~ constructor() super("Negative area");
    }
}