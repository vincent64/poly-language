¦ The Momentum class represents a physical measure of momentum.
¦ It provides convenient operations between momentums and other measurements,
¦ and prevents unit mistakes by explicitly requesting the unit when
¦ providing and retrieving the momentum value.
¦ The default unit of a momentum value is the kilogram meter per second.
¦ @author Vincent Philippe (@vincent64)
¦ @version v0.5
class+ Momentum(Measure) {
    ¦ Constructs a momentum with the given value and unit.
    ¦ @param value the momentum value
    ¦ @param unit the momentum unit
    fn+ constructor(const double value, Unit unit) {
        super(value * unit.factor);
        assert(value >= 0d): new NegativeMomentumException();
    }
    
    ¦ Constructs a momentum with the given value in the default unit.
    ¦ @param value the momentum value
    fn+ constructor(const double value) this(value, Unit.DEFAULT);

    ¦ Adds the current momentum with the given momentum.
    ¦ @param that the momentum
    ¦ @returns the resulting momentum
    op+ Momentum +(Momentum that) = new(value + that.value);

    ¦ Subtracts the current momentum to the given momentum.
    ¦ @param that the momentum
    ¦ @returns the resulting momentum
    op+ Momentum -(Momentum that) = new(value - that.value);

    ¦ Multiplies the current momentum with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting momentum
    op+ Momentum *(double value) = new(this.value * value);

    ¦ Divides the current momentum with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting momentum
    op+ Momentum /(double value) = new(this.value / value);

    ¦ Returns the remainder of the current momentum with the given momentum.
    ¦ @param that the momentum
    ¦ @returns the resulting momentum
    op+ Momentum %(Momentum that) = new(value % that.value);

    ¦ Divides the current momentum with the given mass.
    ¦ @param that the mass
    ¦ @returns the resulting speed
    op+ Speed /(Mass that) = new(value / that.value);

    ¦ Divides the current momentum with the given speed.
    ¦ @param that the speed
    ¦ @returns the resulting mass
    op+ Mass /(Speed that) = new(value / that.value);

    ¦ Divides the current momentum with the given duration.
    ¦ @param that the duration
    ¦ @returns the resulting duration
    op+ Force /(Duration that) = new(value / that.value);

    ¦ Returns whether the current momentum is equal to the given momentum.
    ¦ @param that the momentum
    ¦ @returns true if the momentums are equal
    op+ bool ==(Momentum that) = value == that.value;

    ¦ Returns whether the current momentum is not equal to the given momentum.
    ¦ @param that the momentum
    ¦ @returns true if the momentums are not equal
    op+ bool !=(Momentum that) = value != that.value;

    ¦ Returns whether the current momentum is greater than the given momentum.
    ¦ @param that the momentum
    ¦ @returns true if the current momentum is greater
    op+ bool >(Momentum that) = value > that.value;

    ¦ Returns whether the current momentum is less than the given momentum.
    ¦ @param that the momentum
    ¦ @returns true if the current momentum is less
    op+ bool <(Momentum that) = value < that.value;

    ¦ Returns whether the current momentum is greater or equal that the given momentum.
    ¦ @param that the momentum
    ¦ @returns true if the current momentum is greater or equal
    op+ bool >=(Momentum that) = value >= that.value;

    ¦ Returns whether the current momentum is less or equal than the given momentum.
    ¦ @param that the momentum
    ¦ @returns true if the current momentum is less or equal
    op+ bool <=(Momentum that) = value <= that.value;

    ¦ Returns the momentum value in the given unit.
    ¦ @param unit the momentum unit
    ¦ @returns the momentum value
    fn+ double value(Unit unit) = value / unit.factor;

    ¦ Returns the string representation of the momentum with the given unit.
    ¦ @param unit the momentum unit
    ¦ @returns the momentum string representation
    fn+ String toString(Unit unit) = String.valueOf(value(unit)) + " " + unit.symbol;

    ¦ Returns the string representation of the momentum with the default unit.
    ¦ @returns the momentum string representation
    fn+ String toString() = toString(Unit.DEFAULT);

    fn+ bool equals(Object object) = object ==: Momentum && this == object:Momentum;

    ¦ The Momentum.Unit enum contains every unit that can be used
    ¦ when providing or retrieving the momentum value.
    ¦ The default unit of a momentum value is the kilogram meter per second.
    enum+ Unit {
        KILOGRAM_METER_PER_SECOND(1d, "kg∙m/s");

        ~# const Unit DEFAULT = KILOGRAM_METER_PER_SECOND;
        ~ const double factor;
        ~ const String symbol;

        fn constructor(attr double factor, attr String symbol) { }
    }

    ¦ The Momentum.NegativeMomentumException exception is thrown when there is an attempt
    ¦ to construct a momentum with a negative value.
    exception~ NegativeMomentumException {
        fn~ constructor() super("Negative momentum");
    }
}