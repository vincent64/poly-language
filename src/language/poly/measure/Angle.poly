import poly.math.Math;

¦ The Angle class represents a measure of angle.
¦ It provides convenient operations between angles and other measurements,
¦ and prevents unit mistakes by explicitly requesting the unit when
¦ providing and retrieving the angle value.
¦ The default unit of a angle value is the turn.
¦ @author Vincent Philippe (@vincent64)
¦ @version v0.5
class+ Angle(Measure) {
    ¦ Constructs an angle with the given value and unit.
    ¦ @param value the angle value
    ¦ @param unit the angle unit
    fn+ constructor(const double value, Unit unit)
        super((value * unit.factor) % 1d);
    
    ¦ Constructs a angle with the given value in the default unit (turn).
    ¦ @param value the angle value
    fn+ constructor(const double value) this(value, Unit.DEFAULT);

    ¦ Adds the current angle with the given angle.
    ¦ @param that the angle
    ¦ @returns the resulting angle
    op+ Angle +(Angle that) = new(value + that.value);

    ¦ Subtracts the current angle to the given angle.
    ¦ @param that the angle
    ¦ @returns the resulting angle
    op+ Angle -(Angle that) = new(value - that.value);

    ¦ Multiplies the current angle with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting angle
    op+ Angle *(double value) = new(this.value * value);

    ¦ Divides the current angle with the given double value.
    ¦ @param value the double value
    ¦ @returns the resulting angle
    op+ Angle /(double value) = new(this.value / value);

    ¦ Returns the remainder of the current angle with the given angle.
    ¦ @param that the angle
    ¦ @returns the resulting angle
    op+ Angle %(Angle that) = new(value % that.value);

    ¦ Returns whether the current angle is equal to the given angle.
    ¦ @param that the angle
    ¦ @returns true if the angles are equal
    op+ bool ==(Angle that) = value == that.value;

    ¦ Returns whether the current angle is not equal to the given angle.
    ¦ @param that the angle
    ¦ @returns true if the angles are not equal
    op+ bool !=(Angle that) = value != that.value;

    ¦ Returns whether the current angle is greater than the given angle.
    ¦ @param that the angle
    ¦ @returns true if the current angle is greater
    op+ bool >(Angle that) = value > that.value;

    ¦ Returns whether the current angle is less than the given angle.
    ¦ @param that the angle
    ¦ @returns true if the current angle is less
    op+ bool <(Angle that) = value < that.value;

    ¦ Returns whether the current angle is greater or equal that the given angle.
    ¦ @param that the angle
    ¦ @returns true if the current angle is greater or equal
    op+ bool >=(Angle that) = value >= that.value;

    ¦ Returns whether the current angle is less or equal than the given angle.
    ¦ @param that the angle
    ¦ @returns true if the current angle is less or equal
    op+ bool <=(Angle that) = value <= that.value;

    ¦ Returns the angle value in the given unit.
    ¦ @param unit the angle unit
    ¦ @returns the angle value
    fn+ double value(Unit unit) = value / unit.factor;

    ¦ Returns the string representation of the angle with the given unit.
    ¦ @param unit the angle unit
    ¦ @returns the angle string representation
    fn+ String toString(Unit unit) = String.valueOf(value(unit)) + " " + unit.symbol;

    ¦ Returns the string representation of the angle with the default unit.
    ¦ @returns the angle string representation
    fn+ String toString() = toString(Unit.DEFAULT);

    fn+ bool equals(Object object) = object ==: Angle && this == object:Angle;

    ¦ Returns whether the angle is a zero angle.
    ¦ @returns true if the angle is zero
    fn+ bool isZero() = value == 0d;

    ¦ Returns whether the angle is an acute angle.
    ¦ @returns true if the angle is acute
    fn+ bool isAcute() = value < 0.25d;

    ¦ Returns whether the angle is a right angle.
    ¦ @returns true if the angle is right
    fn+ bool isRight() = value == 0.25d;

    ¦ Returns whether the angle is an obtuse angle.
    ¦ @returns true if the angle is obtuse
    fn+ bool isObtuse() = value > 0.25d && value < 0.5d;

    ¦ Returns whether the angle is a straight angle.
    ¦ @returns true if the angle is straight
    fn+ bool isStraight() = value == 0.5d;

    ¦ Returns whether the angle is a reflex angle.
    ¦ @returns true if the angle is reflex
    fn+ bool isReflex() = value > 0.5d && value < 1d;

    ¦ Returns whether the angle is a full angle.
    ¦ @returns true if the angle is full
    fn+ bool isFull() = value == 1d;

    ¦ The Angle.Unit enum contains every unit that can be used
    ¦ when providing or retrieving the angle value.
    ¦ The default unit of a angle value is the turn.
    enum+ Unit {
        TURN(1d, "turn"),
        DEGREE(1d / 360d, "°"),
        RADIAN(1d / Math.TAU, "rad"),
        GRAD(1d / 400d, "gon"),
        ARCMINUTE(1d / 21_600d, "'"),
        ARCSECOND(1d / 1_296_000d, "\"");

        ~# const Unit DEFAULT = TURN;
        ~ const double factor;
        ~ const String symbol;

        fn constructor(attr double factor, attr String symbol) { }
    }
}